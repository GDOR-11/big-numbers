use wasm_bindgen::prelude::*;
use std::mem;

#[wasm_bindgen]
extern {
    pub fn alert(string: &str);
}

macro_rules! shift_slice_left {
    ($slice: expr, $type: tt) => {
        {
            let carry = $slice[0] >> (mem::size_of::<$type>() * 8 - 1);
            $slice[0] <<= 1;
            for i in 1..$slice.len() {
                $slice[i - 1] |= $slice[i] >> (mem::size_of::<$type>() * 8 - 1);
                $slice[i] <<= 1;
            }
            carry
        } 
    }
}
macro_rules! shift_slices_left {
    ($left: expr, $left_type: tt, $right: expr, $right_type: tt) => {
        {
            shift_slice_left!($left, $left_type);
            $left[$left.len() - 1] |= shift_slice_left!($right, $right_type) as $left_type;
        }
    }
}

fn digits_to_string(digits: &[u64]) -> String {
    let mut string = String::with_capacity(digits.len() * 16);

    let mut in_leading_zeros = true;
    for &digit_group in digits {
        if in_leading_zeros && digit_group == 0 { continue; }
        for j in (0..16).rev() {
            let digit = (digit_group >> (4 * j)) & 0b1111;
            if in_leading_zeros {
                in_leading_zeros = digit == 0;
                if in_leading_zeros { continue; }
            }
            let ascii = digit as u8 + if digit < 10 { 48 } else { 87 };
            string.push(ascii as char);
        }
    }

    if string.is_empty() {
        String::from("0")
    } else {
        string
    }
}

macro_rules! double_dabble_step {
    ($digits: expr, $base256: expr, $base256_type: tt) => {
        {
            for digit in $digits.iter_mut() {
                let mut digit_bitmask = 0xf000000000000000;
                let three = 0x3333333333333333;
                let five = 0x5555555555555555;
                for _ in 0..16 {
                    if *digit & digit_bitmask >= five & digit_bitmask {
                        *digit += three & digit_bitmask;
                    }
                    digit_bitmask >>= 4;
                }
            }
            shift_slices_left!($digits, u64, $base256, $base256_type);
        }
    }
}

// had to do this because the borrow checker didn't like direct usage of the macro inside loops
fn double_dabble_step_u8(digits: &mut [u64], base256: &mut [u8]) {
    double_dabble_step!(digits, base256, u8);
}
fn double_dabble_step_u64(digits: &mut [u64], base256: &mut [u64]) {
    double_dabble_step!(digits, base256, u64);
}

#[wasm_bindgen]
pub unsafe fn base256_to_string(base256: &mut [u8]) -> String {
    let byte_length = base256.len();

    alert("splitting into main data and remainder...");

    let (main_data, remainder) = base256.split_at_mut(byte_length & !0b111);

    alert("converting main u8 chunk into u64 chunk...");

    let mut large_data_chunks = vec![0u64; byte_length / 8];
    for i in 0..large_data_chunks.len() {
        large_data_chunks[i] = u64::from_be_bytes(unsafe {
            std::slice::from_raw_parts(
                main_data.as_ptr().add(8 * i),
                8
            )
        }.try_into().unwrap());
    }

    alert("allocating space for the digits...");

    // 16 * log_256(10) would be the ideal value, but 6.6 is close enough to avoid floating-point
    // issues while also not allocating too much extra memory (the exact value is around 6.64385)
    let digit_groups = (byte_length as f64 / 6.6).ceil() as usize;
    let mut digits = vec![0u64; digit_groups];

    alert("running double dabble on main chunk...");

    for _ in 0..large_data_chunks.len() * 64 {
        double_dabble_step_u64(&mut digits, &mut large_data_chunks);
    }
    alert("running double dabble on remainder...");
    for _ in 0..remainder.len() * 8 {
        double_dabble_step_u8(&mut digits, remainder);
    }

    alert("converting digits to string...");

    digits_to_string(&digits)
}

#[test]
fn test() {
    let base256 = &mut [21,221,134,160,156,8,118,13,204,187,151,178,29,22,99,134,235,202,230,114,217,141,141,100,159,196,44,176,212,39,95,171,88,56,95,98,24,79,100,184,60,253,26,138,120,132,230,15,240,178,42,51,142,105,12,124,225,253,68,89,2,88,22,12,211,164,128,173,214,133,99,251,14,123,111,128,56,113,108,102,202,142,174,139,214,249,129,158,128,145,22,31,23,188,25,191,14,108,96,31,25,98,60,9,154,69,36,230,167,164,54,50,49,218,130,114,80,168,202,220,248,151,179,46,244,162,49,34,152,15,157,62,195,105,16,151,113,220,194,201,231,18,230,37,212,175,35,244,101,18,139,101,23,245,39,154,58,80,116,243,199,200,87,16,109,193,93,70,239,206,100,12,237,20,209,161,84,46,3,128,167,230,237,208,182,36,193,40,58,222,83,102,214,102,46,20,213,68,251,137,178,211,87,89,119,228,101,25,144,108,13,100,220,141,25,152,187,112,168,210,242,100,77,218,239,102,153,78,76,23,15,224,55,32,41,34,116,185,58,233,62,192,65,17,179,90,173,101,149,253,32,36,86,218,208,230,176,255,97,70,124,139,96,202,177,65,168,98,220,35,160,31,92,210,229,40,211,25,125,155,150,165,133,131,147,252,240,206,35,240,158,23,49,212,179,175,188,202,184,151,194,189,210,255,90,14,182,59,16,194,141,125,117,97,178,90,5,220,254,24,143,159,55,135,155,83,9,255,27,79,96,145,133,134,201,47,63,24,255,136,42,237,176,181,24,54,162,18,233,42,75,0,38,227,130,124,214,78,121,74,34,37,46,115,47,46,97,45,84,2,253,214,232,52,119,43,117,141,156,164,205,245,73,56,25,176,104,118,22,151,173,26,54,130,244,108,164,216,213,238,92,76,141,79,61,21,203,193,89,147,236,46,242,142,79,189,109,136,217,98,125,66,130,128,54,146,111,215,100,255,187,197,189,161,164,32,176,177,195,15,109,177,36,246,154,96,196,102,27,216,110,136,236,115,237,13,73,4,195,233,179,224,47,224,138,17,152,51,124,206,75,168,115,137,49,170,189,19,61,172,116,138,90,1,238,186,30,6,60,27,43,156,215,202,227,217,151,238,236,202,217,126,202,162,57,135,177,235,202,81,138,184,176,145,195,246,27,205,132,168,2,170,138,133,124,92,224,89,110,208,155,100,135,6,205,223,171,153,164,180,48,87,200,233,198,56,164,67,184,16,241,84,242,33,246,193,208,177,57,171,73,205,105,114,222,177,56,79,73,254,0,64,39,168,226,93,243,237,17,237,57,198,74,145,190,147,19,112,132,62,183,5,208,164,84,8,95,146,108,66,195,5,79,139,4,168,187,75,60,169,9,64,184,38,21,10,80,189,184,237,139,206,223,69,215,231,214,168,94,230,13,43,147,2,165,16,49,167,238,184,192,204,152,145,59,33,101,113,192,67,105,194,167,159,150,168,223,194,85,233,228,118,184,83,79,39,193,150,64,62,218,14,31,160,192,250,43,213,32,41,23,44,61,109,33,24,134,248,5,166,96,3,152,193,104,254,224,219,118,232,73,107,74,29,20,2,91,129,33,28,160,167,43,65,83,252,200,34,32,172,82,251,156,193,159,55,190,78,166,13,31,157,57,226,139,43,219,253,229,206,228,189,25,23,132,95,238,71,137,49,151,117,27,142,105,96,53,48,183,84,92,155,134,100,23,249,247,23,45,67,233,132,133,1,137,72,66,17,46,200,156,241,189,13,211,35,192,176,154,38,25,46,228,254,133,72,154,4,44,43,138,141,27,13,16,228,10,26,27,56,112,75,243,166,125,56,37,161,174,126,55,169,147,234,163,91,55,198,188,8,47,182,87,228,234,219,78,69,240,203,104,171,142,123,122,239,201,54,72,73,77,0,198,202,0,253,217,16,129,228,17,27,171,155,183,82,117,216,211,17,111,197,173,193,89,180,129,71,42,38,41,153,34,18,187,51,221,206,179,97,170,33,44,19,115,199,106,131,128,200,2,131,108,128,122,172,143,187,134,39,113,246,68,62,149,245,230,243,59,116,57,250,55,129,164,239,186,252,27,233,252,165,76,12,112,225,151,38,196,158,37,146,223,25,86,82,181,48,28,13,81,118,129,82,182,220,12,243,222,159,174,67,57,185,6,140,143,60,209,54,139,66,37,158,192,253,61,163,167,154,237,43,9,47,194,157,195,101,121,158,174,2,29,69,24,115,233,100,102,150,197,221,94,147,229,165,25,242,115,15,57,231,142,170,147,15,194,213,93,221,210,240,34,188,94,19,206,75,74,16,75,241,22,170,250,20,62,69,157,79,158,10,163,49,58,142,149,48,170,143,14,90,69,86,17,148,49,179,171,204,105,94,46,22,192,27,118,190,31,108,108,104,202,175,219,129,215,120,171,126,152,97,44,177,237,95,110,165,63,197,101,225,86,73,208,45,235,121,60,118,217,129,13,47,173,27,212,148,123,42,40,215,244,235,205,187,43,123,85,92,14,228,94,75,43,98,142,38,238,177,63,229,135,205,217,162,135,13,98,24,160,70,203,226,32,121,142,211,138,8,12,10,218,196,200,49,0,192,90,30,21,18,93,79,177,59,205,107,155,50,164,125,175,108,191,59,232,168,102,217,22,195,239,25,144,41,30,47,18,133,216,166,140,39,57,39,79,245,66,165,27,249,64,66,33,209,34,72,104,65,91,83,134,57,140,40,141,172,50,63,205,207,52,197,193,190,184,159,128,13,9,12,8,255,98,36,216,57,125,198,165,138,213,141,168,188,67,206,101,176,180,211,209,236,44,32,152,180,187,185,83,150,252,197,127,81,203,108,235,46,91,20,252,139,6,4,251,139,131,221,134,141,69,124,28,168,211,209,86,91,28,220,89,242,231,84,164,247,220,210,172,211,208,215,163,218,70,135,231,58,34,86,60,7,217,148,112,0,133,132,95,21,166,117,103,98,170,121,129,30,17,231,233,35,204,143,234,221,90,16,64,169,254,34,1,199,177,62,119,180,134,40,197,79,191,24,226,111,149,193,144,25,95,156,142,12,232,148,135,159,159,113,143,166,163,79,155,231,9,44,153,231,72,115,162,67,31,158,11,252,95,131,135,116,58,181,131,155,48,113,67,223,6,54,64,104,212,5,77,83,240,168,231,229,180,207,145,172,27,13,117,35,226,3,20,33,192,117,123,9,24,52,84,234,47,141,200,125,5,145,185,116,218,85,24,194,139,17,217,88,2,194,41,51,24,161,15,70,22,135,11,237,109,33,153,86,37,178,241,180,251,143,37,46,250,181,211,115,82,5,198,59,144,187,126,66,92,247,60,93,164,241,57,142,50,116,194,251,184,183,133,200,243,74,169,195,21,190,54,32,68,4,70,165,225,190,92,141,63,38,76,118,233,60,129,179,116,193,131,53,0,47,251,111,197,231,81,197,81,230,191,66,55,219,204,90,88,160,236,190,44,184,162,145,58,115,24,9,241,143,70,119,56,223,100,238,150,158,18,88,30,101,223,205,83,132,184,3,26,132,178,147,100,204,226,79,245,208,183,83,99,230,156,246,102,47,207,224,165,118,14,32,229,253,112,233,192,146,202,44,163,153,158,216,100,35,104,103,33,176,0,178,160,166,173,49,191,243,124,98,176,30,148,21,49,20,29,188,217,253,216,45,172,48,92,170,53,37,115,43,60,84,169,125,172,214,204,61,132,236,221,170,29,110,20,122,234,36,220,89,235,70,83,99,183,114,138,34,70,132,135,47,147,77,132,205,80,173,48,182,18,169,107,174,208,209,5,69,118,209,169,251,202,169,130,82,99,6,17,223,27,206,14,179,123,151,108,18,122,49,53,137,165,169,203,15,98,236,124,130,22,45,246,180,202,253,6,221,112,203,54,234,14,74,254,50,20,227,59,165,160,18,117,45,204,74,38,116,99,123,80,224,59,11,26,60,156,172,20,210,10,219,244,252,40,128,50,74,74,78,194,40,221,228,212,130,183,244,155,65,216,91,63,160,233,201,207,161,129,173,214,140,222,127,29,225,94,221,38,210,247,24,115,77,53,170,169,112,112,193,22,70,250,100,120,201,233,40,54,183,228,84,255,47,185,250,88,150,171,98,72,208,207,191,212,54,218,29,7,145,43,172,185,184,34,223,128,7,218,60,44,175,253,115,132,60,84,47,3,92,206,90,131,13,198,114,91,49,108,61,244,162,214,57,176,189,91,206,24,57,0,30,167,89,94,92,175,250,69,227,247,255,234,52,173,36,30,96,112,201,81,231,145,138,151,62,31,176,245,27,98,219,56,133,32,23,129,224,54,78,232,134,4,117,80,237,170,80,232,144,125,144,35,93,31,134,171,37,223,44,175,48,125,129,232,77,182,207,90,251,149,235,37,115,55,165,92,54,245,141,89,249,136,161,202,174,225,32,172,157,212,231,119,220,216,238,38,111,94,135,170,162,187,216,221,18,152,48,159,223,97,231,112];
    println!("{}", unsafe {
        base256_to_string(base256)
    });
    panic!();
}
